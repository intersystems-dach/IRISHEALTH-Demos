/// This bussiness process creates FHIR resources using custom DTLs and
/// packs those resources into a HS.FHIRServer.Interop.Request message.
Class ISC.DACH.Interop.DTLtoFHIR.Process Extends (Ens.BusinessProcess, HS.HC.Util.Trace.Helper)
{

/// Configuration item(s) to which to send file stream messages
Property TargetConfigNames As %String(MAXLEN = 1000);

Parameter SETTINGS = "TargetConfigNames:Basic:selector?multiSelect=1&context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId},DTLClassNames::selector?multiSelect=1&context={Ens.ContextSearch/SubclassOf?class=Ens.DataTransform&abstract=0},TransmissionMode,FHIRFormat,ValidResourceRequired,FHIRMetadataSet::selector?context={HS.FHIRServer.Util.ContextSearch/FHIRMetadataSets}";

/// One or more DTL class names (seperated by ',' character) which are used to convert the request message to FHIR
Property DTLClassNames As %String(MAXLEN = "");

/// The FHIR format to use for FHIR request message payload.
Property FHIRFormat As %String(DISPLAYLIST = ",JSON,XML", VALUELIST = ",JSON,XML") [ InitialExpression = "JSON" ];

/// FHIR Metadata Set. These are defined in HS_FHIRServer.FHIRMetadataSet. Will only be used if validation is enabled and or if XML format is used.
Property FHIRMetadataSet As %String(MAXLEN = 256);

/// individual = Send each generated FHIR resource in its own individual create or update interaction.
Property TransmissionMode As %String(DISPLAYLIST = ",transaction,individual", VALUELIST = ",transaction,individual") [ InitialExpression = "transaction" ];

/// If checked, then the FHIR that is generated by the SDA3 to FHIR DTL transformation
/// must be valid FHIR. If it fails validation, then it will not be forwarded.
/// Regardless of the value of this setting, validation failures will be logged in
/// the Event Log as alert messages.
Property ValidResourceRequired As %Boolean [ InitialExpression = 1 ];

Method OnInit() As %Status
{
	If ..TargetConfigNames="" {
		Return $$$ERROR($$$GeneralError, "TargetConfigNames not configured")
	}

	If (..FHIRMetadataSet="") && (..ValidResourceRequired || ..FHIRFormat = "XML") {
		Return $$$ERROR($$$GeneralError, "FHIRMetadataSet not configured")
	}
	 
	Return $$$OK
}

Method OnRequest(pRequest As %Persistent, Output pResponse As Ens.Response) As %Status
{
	#dim tSC As %Status = $$$OK
	#dim tBundle As %DynamicObject
	#dim tTarget As %JSON.Adaptor

	// Initalize Response Object
	Set pResponse = ##class(Ens.Response).%New()

	// Initialize the Bundle
	Set tBundle = ##class(%DynamicObject).%New()
	Set tBundle.resourceType = "Bundle"
	Set tBundle.type = "transaction"
	Set tBundle.entry = ##class(%DynamicArray).%New()	

	// Iterate throug all DTL classes
	Set tDTLClassList = $ListFromString(..DTLClassNames,",")
	Set n = $ListLength(tDTLClassList)
	For i=1:1:n {
		Set tDTLClass = $ZSTRIP($List(tDTLClassList,i),"<>PC")

		// Continue if class is empty
		Continue:""=tDTLClass

		$$$TRACE("Applying DTL '"_tDTLClass_"'")

		// Check if request type matches DTL source type
		Set tSourceType = $classmethod(tDTLClass, "GetSourceType")		
		if '(pRequest.%IsA(tSourceType)) {
			Set errorMsg = "Expected source type for DTL '"_tDTLClass_"' is '"_tSourceType_"', actual source type is '"_$CLASSNAME(pRequest)_"'."		
			Return $$$ERROR($$$GeneralError, errorMsg)
		}

		// Create target object
		Set tTargetType = $classmethod(tDTLClass, "GetTargetType")
		Set tTarget = $classmethod(tTargetType, "%New")

		// Transform request data using DTL class
		Try {
			$$$ThrowOnError($classmethod(tDTLClass, "Transform", pRequest, .tTarget, .aux))
		}
		Catch ex {
			return ex.AsStatus()
		}
		
		// Convert class to Dynamic object using JSON
		#dim tFhirResource As %DynamicObject
		Try {
			Set tFhirResource = ##class(%DynamicObject).%FromJSON(tTarget.ToJSON())
		}
		Catch ex {
			return ex.AsStatus()
		}		
			
		// TODO validate JSON
		
		// Add FHIR Resource to bundle
		Set entry = ##class(%DynamicObject).%New()
		Set entry.request = ##class(%DynamicObject).%New()
		If (tFhirResource.id '= "") {
			Set entry.fullUrl = tFhirResource.resourceType _ "/" _ tFhirResource.id
			Set entry.request.method = "PUT"
			set entry.request.url = tFhirResource.resourceType _ "/" _ tFhirResource.id

			
		} Else {
			Set id = $zconvert($system.Util.CreateGUID(), "L")
			Set entry.fullUrl = "urn:uuid:" _ id
			Set entry.request.method = "POST"
			Set entry.request.url = tFhirResource.resourceType
		}

		Set entry.resource = tFhirResource					
		Do tBundle.entry.%Push(entry)
	}

	// Send message as specified in transmission mode
    If (..TransmissionMode = "transaction") {
		Set tSC = ..CreateAndSendMessage(tBundle, 1)
    } else {
		For i = 0:1:tBundle.entry.%Size()-1 {
			Set tSC = ..CreateAndSendMessage(tBundle.entry.%Get(i), 0)
		}
	}

	Return tSC
}

/// Creates and sends HS.FHIRServer.Interop.Request message
Method CreateAndSendMessage(pResource As %DynamicObject, pIsBundle As %Boolean) As %Status [ Private ]
{
	Set tSC = $$$OK

	$$$TRACE("Message content type is '"_..FHIRFormat_"'.")

	Try {
		// Create FHIR interop request
		Set tRequest = ##class(HS.FHIRServer.Interop.Request).%New()
		Set tRequest.Request.RequestFormatCode = ..FHIRFormat
		Set tRequest.Request.ResponseFormatCode = ..FHIRFormat

		If (pIsBundle) {
			Set tRequest.Request.RequestPath = "/"
			Set tRequest.Request.RequestMethod = "POST"
		} Else {			
			If (pResource.resource.id="") {
				Set tRequest.Request.RequestPath = pResource.resource.resourceType
				Set tRequest.Request.RequestMethod = "POST"
			} Else {
				Set tRequest.Request.RequestPath = pResource.resource.resourceType_"/"_pResource.resource.id
				Set tRequest.Request.RequestMethod = "PUT"
			}
		}

		// Create Quickstream Object
		Set tResourceStream = ..GetResourceStream(pResource)
		Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
		Set tRequest.QuickStreamId = tQuickStream.%Id()
		Do tQuickStream.CopyFrom(tResourceStream)

		// HS Tracing
		$$$HSTRACE("Request QuickStream", "tQuickStream", tQuickStream)
	
		Set tTargets = $ListFromString(..TargetConfigNames,",")
		Set n = $ListLength(tTargets)
		For i=1:1:n {
			Set tTarget = $List(tTargets,i)
			Continue:""=tTarget
			$$$TRACE("Sending message to '"_tTarget_"'")
			$$$ThrowOnError(..SendRequestSync(tTarget, tRequest, .tResponse))

			// Clear response quickstream
			If ($IsObject($Get(tResponse))) && (tResponse.QuickStreamId'="") {
				Set tResponseQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(tResponse.QuickStreamId)
				// HS Tracing
				$$$HSTRACE("Response QuickStream", "tResponseQuickStream", tResponseQuickStream)
				If ($IsObject(tResponseQuickStream)) {
					Do tResponseQuickStream.Clear(1)
				}
				Set tResponse.QuickStreamId = ""
			}
		}

		$$$TRACE("Sending completed.")

	} Catch eException {
		Set tSC = eException.AsStatus()
	}

	// Clear Quickstream object
	If ($IsObject($Get(tQuickStream))) {
		Do tQuickStream.Clear(1)
	}

	Quit tSC
}

/// Get dynamic object as XML or JSON stream
Method GetResourceStream(pResource As %DynamicObject) [ Private ]
{
	Set tResourceStream = ##class(%Stream.TmpCharacter).%New()

	If (..FHIRFormat="JSON") {
		Do pResource.%ToJSON(tResourceStream)
	} ElseIf (..FHIRFormat="XML") {
		Set tFHIRMetadataSetKey = $ZSTRIP($PIECE(..FHIRMetadataSet, "/", 1), "<>W")
		Set tSchema = ##class(HS.FHIRServer.Schema).LoadSchema(tFHIRMetadataSetKey)
		Set tIndentChars = "   "
		Set tLineTerminator = $Char(13,10)
		Do ##class(HS.FHIRServer.Util.JSONToXML).JSONToXML(pResource, .tResourceStream ,tSchema, tIndentChars, tLineTerminator)
	}

	Do tResourceStream.Rewind()	
	Return tResourceStream
}

/// Return an array of connections for drawing lines on the config diagram
ClassMethod OnGetConnections(Output pArray As %String, pItem As Ens.Config.Item)
{
	Do ##super(.pArray,pItem)
	If pItem.GetModifiedSetting("TargetConfigNames",.tValue) {
		Set tTargets = $ListFromString(tValue,",")
		Set n = $ListLength(tTargets)
		for i=1:1:n {
			Set tTarget = $List(tTargets,i)
			continue:""=tTarget
			Set pArray(tTarget)="" 
		}
	}
}

Storage Default
{
<Data name="DTLtoFHIRDefaultData">
<Subscript>"DTLtoFHIR"</Subscript>
<Value name="1">
<Value>DTLClasses</Value>
</Value>
<Value name="2">
<Value>TargetConfigNames</Value>
</Value>
<Value name="3">
<Value>FHIRFormat</Value>
</Value>
<Value name="4">
<Value>FormatFHIROutput</Value>
</Value>
<Value name="5">
<Value>TransmissionMode</Value>
</Value>
<Value name="6">
<Value>ValidResourceRequired</Value>
</Value>
<Value name="7">
<Value>DTLClassNames</Value>
</Value>
<Value name="8">
<Value>FHIRMetadataSet</Value>
</Value>
<Value name="9">
<Value>TraceOperations</Value>
</Value>
<Value name="10">
<Value>DTLClassList</Value>
</Value>
</Data>
<DefaultData>DTLtoFHIRDefaultData</DefaultData>
<Type>%Storage.Persistent</Type>
}

}
